#version 400 core

in vec3 v_Color;
in vec3 v_Normal;
in vec3 v_Pos;
out vec4 FragColor;

uniform vec3 DLightDir;
uniform vec3 PLightPos;
uniform mat4 trans;
uniform mat4 worldinv;
uniform mat4 projmat;
uniform mat4 viewMat;
uniform mat4 worldMat;
vec3 CalcDLight(vec3 DLDir,vec3 normal){
	vec3 lightDir=normalize(DLDir);
	vec3 reflectDir=reflect(-lightDir,normal);

	vec3 ambient = 0.05*v_Color;
	vec3 diffuse = max(dot(normal,lightDir),0.0)*v_Color;
	vec3 specular=pow(max(dot(normal,reflectDir),0.0),10)*vec3(1.0,1.0,1.0);


	return ambient+diffuse+specular;
}
vec3 CalcPLight(vec3 PLPos,vec3 vPos,vec3 normal,vec3 ViewDir){
	vec3 lightDir=normalize(PLPos-vPos);
	vec3 reflectDir=normalize(reflect(-lightDir,normal));

	vec3 ambient=0.05*v_Color;
	vec3 diffuse = max(dot(lightDir,normal),0.0)*v_Color;
	vec3 specular = pow(max(dot(normal,reflectDir),0.0),10)*vec3(0.0,1.0,0.0);
	float distance=length(PLPos-vPos);
	float attenuation = 263/(distance*distance);

	return attenuation*(ambient+diffuse+specular);
}
void main()
{
	vec3 tNorm=normalize(v_Normal);
	vec4 tDLightDir=viewMat*vec4(DLightDir,0.0);

	vec3 viewDir=normalize(-v_Pos.xyz);

	vec3 color=vec3(0.0,0.0,0.0);

	color+=CalcDLight(tDLightDir.xyz,tNorm);
	
	vec4 tPLightPos=viewMat*vec4(PLightPos,0.0);

	color+=CalcPLight(tPLightPos.xyz,v_Pos.xyz,tNorm,viewDir);

	FragColor=vec4(color,1.0);
}